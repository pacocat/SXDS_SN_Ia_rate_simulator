#!/opt/local/bin/python"""# Written by Jun E. Okumura in 2014.02# contact paco.sci@gmail.com if you have any questions or comments.This code extends light curves generated by "lc_calculator.py".## NOTE ##To run this code, numpy should be installed. The author used version '1.8.0'See http://www.numpy.org/ if you do not have numpy."""import numpy as np### options ###camera_type = 0# [0:SC 1:HSC]object_type = 0# 0:SN Ia (Hsiao) 1:SN Ia (Nugent) 2:SN Ia-91bg (Nugent) 3:SN Ia-91T (Nugent)# 4:SN Ibc (Nugent) 5:SN IIL (Nugent) 6:SN IIP (Nugent) 7:SN IIn (Nugent)bands = ['B','V','R','i','z']# You can determine which filters to use for the template# Available filter is [B, V, R, i, z] for SC and [g, r, i, z, y] for HSCmlim = 30.0 # mag# the variable mlim is set to define the darkest edge of light curve.# In the author's template, mlim = 30 is set-uped. # For future deep survey, I suggest mlim larger than 30 mag. # set up directory nameif object_type == 0: targetdir = 'Hsiao_Ia'elif object_type == 1: targetdir = 'Nugent_Ia'elif object_type == 2: targetdir = 'Nugent_Ia91bg'elif object_type == 3: targetdir = 'Nugent_Ia91T'elif object_type == 4: targetdir = 'Nugent_Ibc'elif object_type == 5: targetdir = 'Nugent_IIL'elif object_type == 6: targetdir = 'Nugent_IIP'elif object_type == 7: targetdir = 'Nugent_IIn'else: print 'Please set correct number for \'object_type\':0-6'camera_name = 'SC' if camera_type == 0 else 'HSC'# start making template light curvesfor z in np.arange(0.0,1.81,0.05):    # load light curve at redshift z    data = np.loadtxt('./%s/%s/z%03d.dat' % (camera_name,targetdir,z*100.1))    # maximum magnitude in i-band    imax=min(data[:,19])    # the day of max in i-band. Usually SN have different day of max for different filter.     # In this code, template's 0-day is defined from i-band because SXDS SN search is based on i-band.    daymax=data[np.where(data[:,19]==imax)[0][0]][0]    # open output files '_ext' represents extraporated light curve,    # and '_norm' represents normalized light curve.    foutb=open('./%s/%s/z%03d_ext.dat' % (z*100.1),'w')    foutc=open('./%s/%s/z%03d_ext_norm.txt' % (z*100.1),'w')    # extrapolated LC (file b)    foutb.write('%7.3f %7.4f\n' % (-200.0,50.0))    foutb.write('%7.3f %7.4f\n' % (data[0,0],50.0))    foutc.write('%7.3f %7.4f\n' % (-200.0,20.0))    foutc.write('%7.3f %7.4f\n' % (data[0,0]-daymax,20.0))    for i in range(1,len(data)):        foutb.write('%7.3f %7.4f\n' % (data[i,0],data[i,19]))        foutc.write('%7.3f %7.4f\n' % (data[i,0]-daymax,data[i,19]-imax))    coa=(data[-1,19]-data[-6,19])/(data[-1,0]-data[-6,0])    cob=(data[-6,19]*data[-1,0]-data[-1,19]*data[-6,0])/(data[-1,0]-data[-6,0])    daylim=(mlim-cob)/coa    if (daylim > data[-1,0]):        foutb.write('%7.3f %7.4f\n' % (daylim,mlim))        foutc.write('%7.3f %7.4f\n' % (daylim-daymax,mlim-imax))    fouta.close()    foutb.close()    foutc.close()